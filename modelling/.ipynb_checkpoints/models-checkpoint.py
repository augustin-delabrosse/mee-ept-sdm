"""
All docstrings and comments were generated by Claude Sonnet 4.
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, models
from tensorflow.keras.applications import ResNet50

def build_multiscale_cnn(input_shape=(128, 128, 4), num_classes=1):
    """
    Build a multi-scale Convolutional Neural Network (CNN) for image classification.

    This model extracts features at multiple spatial scales using parallel convolutional
    branches with different receptive fields. Features from each scale are concatenated
    before passing through fully-connected layers.

    Args:
        input_shape (tuple): Shape of the input images, including channels (H, W, C).
        num_classes (int): Number of output classes. If 1, uses sigmoid activation for binary classification.

    Returns:
        tf.keras.Model: Compiled Keras model.
    """
    inputs = layers.Input(shape=input_shape)

    # First scale: Small receptive field
    x1 = layers.Conv2D(32, (3, 3), activation="relu", padding="same")(inputs)
    x1 = layers.MaxPooling2D((2, 2))(x1)
    x1 = layers.BatchNormalization()(x1)
    x1 = layers.Conv2D(64, (3, 3), activation="relu", padding="same")(x1)
    x1 = layers.MaxPooling2D((2, 2))(x1)
    x1 = layers.GlobalAveragePooling2D()(x1)  # Flatten after final conv layer

    # Second scale: Medium receptive field
    x2 = layers.Conv2D(32, (5, 5), activation="relu", padding="same")(inputs)
    x2 = layers.MaxPooling2D((4, 4))(x2)
    x2 = layers.BatchNormalization()(x2)
    x2 = layers.Conv2D(64, (5, 5), activation="relu", padding="same")(x2)
    x2 = layers.MaxPooling2D((2, 2))(x2)
    x2 = layers.GlobalAveragePooling2D()(x2)

    # Third scale: Large receptive field
    x3 = layers.Conv2D(32, (7, 7), activation="relu", padding="same")(inputs)
    x3 = layers.MaxPooling2D((8, 8))(x3)
    x3 = layers.BatchNormalization()(x3)
    x3 = layers.Conv2D(64, (7, 7), activation="relu", padding="same")(x3)
    x3 = layers.MaxPooling2D((2, 2))(x3)
    x3 = layers.GlobalAveragePooling2D()(x3)

    # Concatenate multi-scale features
    merged = layers.Concatenate()([x1, x2, x3])

    # Fully connected layers
    dense = layers.Dense(256, activation="relu")(merged)
    dense = layers.Dropout(0.5)(dense)
    dense = layers.Dense(128, activation="relu")(dense)
    dense = layers.Dropout(0.3)(dense)

    # Output layer
    output = layers.Dense(num_classes, activation="sigmoid" if num_classes == 1 else "softmax")(dense)

    model = models.Model(inputs, output)
    return model

def build_resnet(input_shape=(128, 128, 4), num_classes=1):
    """
    Build a ResNet50-based model for image classification.

    Args:
        input_shape (tuple): Shape of the input images (H, W, C).
        num_classes (int): Number of output classes. If 1, uses sigmoid activation.

    Returns:
        tf.keras.Model: Compiled Keras model with ResNet50 backbone.
    """
    # Input layer definition
    input_tensor = layers.Input(shape=input_shape)
    
    # Build ResNet50 backbone 
    resnet = ResNet50(input_tensor=input_tensor, weights=None, include_top=False)
    
    # Add classification head
    x = layers.GlobalAveragePooling2D()(resnet.output)
    x = layers.Dense(num_classes, activation="sigmoid" if num_classes == 1 else "softmax")(x)
    model = models.Model(inputs=input_tensor, outputs=x)
    
    return model

def define_mlp(input_shape=(None, ), num_classes=1):
    """
    Define a simple Multi-Layer Perceptron (MLP) for binary classification.

    Args:
        input_shape (tuple): Shape of the input features.
    
    Returns:
        tf.keras.Model: Compiled Keras MLP model.
    """
    # Note: Input shape should be provided for the first layer
    model = keras.Sequential([
        layers.Input(shape=input_shape),
        layers.Dense(128, activation="relu", kernel_regularizer="l2"),
        layers.Dense(64, activation="relu", kernel_regularizer="l2"),
        layers.Dense(32, activation="relu", kernel_regularizer="l2"),
        layers.Dense(num_classes, activation="sigmoid" if num_classes == 1 else "softmax")
    ])
    return model